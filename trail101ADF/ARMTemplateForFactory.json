{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "trail101ADF"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabaseKV_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseKV'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=trail-db-server.database.windows.net;Initial Catalog=db1;User ID=serveradmin"
		},
		"LS_AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase'"
		},
		"blob_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'blob_ls'"
		},
		"sql_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_ls'"
		},
		"AzSqlDbKV02_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "dbsqlcs2"
		},
		"AzureBlobStoragekV_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "blobcs"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://trailadlsgen2storage.dfs.core.windows.net/"
		},
		"AzureKeyVaultLS_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://trailazurekeeyvault.vault.azure.net/"
		},
		"eventtrigger01_properties_pipelineEventTrigger_parameters_ppcontainer": {
			"type": "string",
			"defaultValue": "@triggerbody().folderpath"
		},
		"eventtrigger01_properties_pipelineEventTrigger_parameters_ppfile": {
			"type": "string",
			"defaultValue": "@triggerbody().filename"
		},
		"eventtrigger01_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/5824bc85-6ad6-4e78-951c-ffbebf57b4ff/resourceGroups/TrialRG/providers/Microsoft.Storage/storageAccounts/trail1storageaccount"
		},
		"workingTumbling_properties_pipeline_parameters_windowstarttime": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"workingTumbling_properties_pipeline_parameters_windowendtime": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		},
		"workingTumbling_properties_pipeline_parameters_triggerstarttime": {
			"type": "string",
			"defaultValue": "@trigger().startTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TumblingWindowDemoWorking')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_source02",
								"type": "DatasetReference",
								"parameters": {
									"dswindowstarttime": {
										"value": "@pipeline().parameters.windowstarttime",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "adls_sink02",
								"type": "DatasetReference",
								"parameters": {
									"dswindowstarttime": {
										"value": "@pipeline().parameters.windowstarttime",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowstarttime": {
						"type": "string"
					},
					"windowendtime": {
						"type": "string"
					},
					"triggerstarttime": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adls_source02')]",
				"[concat(variables('factoryId'), '/datasets/adls_sink02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobToSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from csv to sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "ref_no",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "period",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 8
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "datavalue",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "emp_status",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "emp_subject",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "emp_group",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "emp_series1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "emp_series2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csv_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-30T22:42:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_dataset')]",
				"[concat(variables('factoryId'), '/datasets/sql_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyFilesToMultipleFolders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.outputFolders",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DSblobsource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DSblobsink",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSblobsource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"outputFolders": {
						"type": "array",
						"defaultValue": [
							"out1",
							"out2",
							"out3"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T23:50:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSblobsource')]",
				"[concat(variables('factoryId'), '/datasets/DSblobsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineAppendVariableSetVariableDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "marks",
							"value": {
								"value": "@int(80)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "total",
							"value": {
								"value": "@variables('marks')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "firstMarks",
							"value": {
								"value": "@{variables('marks')[0]}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"marks": {
						"type": "Array",
						"defaultValue": [
							10,
							20,
							30,
							10
						]
					},
					"total": {
						"type": "Array"
					},
					"firstMarks": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineColPatternDF01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Col Pattern",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowColumnPatterns01",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProducts": {},
									"sinkProducts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowColumnPatterns01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineColumnPatternsdataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ColumnPatternsDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowColumnPatternsDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceOrders": {},
									"sinkOrderTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowColumnPatternsDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCopyBehaviour')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Jsoninput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JsonOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Jsoninput')]",
				"[concat(variables('factoryId'), '/datasets/JsonOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCopyDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "filePath",
										"value": "$$FILEPATH"
									},
									{
										"name": "fileName",
										"value": "$$FILENAME"
									},
									{
										"name": "modifiedOn",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DSmoviesCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DScsvOut11",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSmoviesCSV')]",
				"[concat(variables('factoryId'), '/datasets/DScsvOut11')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCopyMultipleTablesToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTableExists",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select table_name from information_schema.tables where table_schema='dbo'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTableExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTableExists').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy tables",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTables",
											"type": "DatasetReference",
											"parameters": {
												"schemaname": {
													"value": "@string('dbo')",
													"type": "Expression"
												},
												"tablename": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tables",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTables')]",
				"[concat(variables('factoryId'), '/datasets/Tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowAggregateTransformationDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AggregateDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowAggregateDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"movieRatings": {},
									"sinkMovieRatings": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowAggregateDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataflowColumnPatterns')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pipelineDataflowDerivedColumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowDerivedColumnDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomerTable": {},
									"sinkDemoCustomerTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowDerivedColumnDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDeleteDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "deleteFileBlob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "out11"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": "2024-01-13T00:00:00.000Z",
								"modifiedDatetimeEnd": "2024-01-15T05:00:00.000Z",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/deleteFileBlob')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineEventTrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "eventcsv",
								"type": "DatasetReference",
								"parameters": {
									"containername": {
										"value": "@pipeline().parameters.ppcontainer",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.ppfile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "eventoutcsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ppcontainer": {
						"type": "string"
					},
					"ppfile": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eventcsv')]",
				"[concat(variables('factoryId'), '/datasets/eventoutcsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Conditional Split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowConditionalSplitDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmp": {},
									"sourceEmployee": {},
									"sinkTesting": {},
									"sinkSales": {},
									"sinkHR": {},
									"sinkTestingemp": {},
									"sinksalesemp": {},
									"sinkOtheremp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowConditionalSplitDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineFlowLetDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow flowlet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowFlowLetDemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowFlowLetDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineForEachDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('inputArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputArray",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"inputArray": {
						"type": "Array",
						"defaultValue": [
							"@range(0,5)"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineGetMetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blobFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "moviesFile",
							"value": {
								"value": "@activity('Get Metadata1').output.structure",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"moviesFile": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/blobFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineIfConditionDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('route')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DSmoviesCSV",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DScsvSink2",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DSmoviesCSV",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DScsvSink",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"route": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSmoviesCSV')]",
				"[concat(variables('factoryId'), '/datasets/DScsvSink2')]",
				"[concat(variables('factoryId'), '/datasets/DScsvSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLogicApps')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlDB",
								"type": "DatasetReference",
								"parameters": {
									"schemaname": {
										"value": "@pipeline().parameters.ppschemaname",
										"type": "Expression"
									},
									"tablename": {
										"value": "@pipeline().parameters.pptablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlToBlob",
								"type": "DatasetReference",
								"parameters": {
									"containername": {
										"value": "@pipeline().parameters.ppcontainername",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.ppfilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ppschemaname": {
						"type": "string"
					},
					"pptablename": {
						"type": "string"
					},
					"ppcontainername": {
						"type": "string"
					},
					"ppfilename": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDB')]",
				"[concat(variables('factoryId'), '/datasets/sqlToBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLookupDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DSmoviesCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "title",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.title",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.emp where salary > 55000.00",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "emptable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Lookup3",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_emp1]",
								"storedProcedureParameters": {
									"esal": {
										"type": "Double"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "emptable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"title": {
						"type": "String"
					},
					"salary": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSmoviesCSV')]",
				"[concat(variables('factoryId'), '/datasets/emptable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineScriptActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "id",
											"type": "Int16",
											"value": "10",
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "select * from dbo.emp where empid = @id;\ndeclare @msg nvarchar(20);\nset @msg = 'hurray';\nprint @msg;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00",
							"logSettings": {
								"logDestination": "ActivityOutput"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "name",
							"value": {
								"value": "@activity('Script1').output.resultSets[0].rows[0].empname",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"name": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineSetVariableDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentdate",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentdate": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineStoredProcedureDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_remove_emp]",
							"storedProcedureParameters": {
								"name": {
									"value": "Noah Taylor",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineSwitchDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toLower(pipeline().parameters.pfile)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "customer",
									"activities": [
										{
											"name": "Customer Wait",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								},
								{
									"value": "product",
									"activities": [
										{
											"name": "Product Wait",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Default Wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pfile": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Advertisement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaname": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaname",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSblobsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSblobsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date ",
						"type": "String"
					},
					{
						"name": "series ",
						"type": "String"
					},
					{
						"name": "OPEN ",
						"type": "String"
					},
					{
						"name": "HIGH ",
						"type": "String"
					},
					{
						"name": "LOW ",
						"type": "String"
					},
					{
						"name": "PREV. CLOSE ",
						"type": "String"
					},
					{
						"name": "ltp ",
						"type": "String"
					},
					{
						"name": "close ",
						"type": "String"
					},
					{
						"name": "vwap ",
						"type": "String"
					},
					{
						"name": "52W H ",
						"type": "String"
					},
					{
						"name": "52W L ",
						"type": "String"
					},
					{
						"name": "VOLUME ",
						"type": "String"
					},
					{
						"name": "VALUE ",
						"type": "String"
					},
					{
						"name": "No of trades ",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DScsvOut11')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "out11"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DScsvSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DScsvSink2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSmoviesCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies_metadata.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "adult",
						"type": "String"
					},
					{
						"name": "belongs_to_collection",
						"type": "String"
					},
					{
						"name": "budget",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "homepage",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "imdb_id",
						"type": "String"
					},
					{
						"name": "original_language",
						"type": "String"
					},
					{
						"name": "original_title",
						"type": "String"
					},
					{
						"name": "overview",
						"type": "String"
					},
					{
						"name": "popularity",
						"type": "String"
					},
					{
						"name": "poster_path",
						"type": "String"
					},
					{
						"name": "production_companies",
						"type": "String"
					},
					{
						"name": "production_countries",
						"type": "String"
					},
					{
						"name": "release_date",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "runtime",
						"type": "String"
					},
					{
						"name": "spoken_languages",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "tagline",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "video",
						"type": "String"
					},
					{
						"name": "vote_average",
						"type": "String"
					},
					{
						"name": "vote_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoCustomerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "ZipCode",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "MobileNumber",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DemoCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonContinent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "continent.json",
						"container": "jsoninput"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"BD": {
							"type": "string"
						},
						"BE": {
							"type": "string"
						},
						"BF": {
							"type": "string"
						},
						"BG": {
							"type": "string"
						},
						"BA": {
							"type": "string"
						},
						"BB": {
							"type": "string"
						},
						"WF": {
							"type": "string"
						},
						"BL": {
							"type": "string"
						},
						"BM": {
							"type": "string"
						},
						"BN": {
							"type": "string"
						},
						"BO": {
							"type": "string"
						},
						"BH": {
							"type": "string"
						},
						"BI": {
							"type": "string"
						},
						"BJ": {
							"type": "string"
						},
						"BT": {
							"type": "string"
						},
						"JM": {
							"type": "string"
						},
						"BV": {
							"type": "string"
						},
						"BW": {
							"type": "string"
						},
						"WS": {
							"type": "string"
						},
						"BQ": {
							"type": "string"
						},
						"BR": {
							"type": "string"
						},
						"BS": {
							"type": "string"
						},
						"JE": {
							"type": "string"
						},
						"BY": {
							"type": "string"
						},
						"BZ": {
							"type": "string"
						},
						"RU": {
							"type": "string"
						},
						"RW": {
							"type": "string"
						},
						"RS": {
							"type": "string"
						},
						"TL": {
							"type": "string"
						},
						"RE": {
							"type": "string"
						},
						"TM": {
							"type": "string"
						},
						"TJ": {
							"type": "string"
						},
						"RO": {
							"type": "string"
						},
						"TK": {
							"type": "string"
						},
						"GW": {
							"type": "string"
						},
						"GU": {
							"type": "string"
						},
						"GT": {
							"type": "string"
						},
						"GS": {
							"type": "string"
						},
						"GR": {
							"type": "string"
						},
						"GQ": {
							"type": "string"
						},
						"GP": {
							"type": "string"
						},
						"JP": {
							"type": "string"
						},
						"GY": {
							"type": "string"
						},
						"GG": {
							"type": "string"
						},
						"GF": {
							"type": "string"
						},
						"GE": {
							"type": "string"
						},
						"GD": {
							"type": "string"
						},
						"GB": {
							"type": "string"
						},
						"GA": {
							"type": "string"
						},
						"SV": {
							"type": "string"
						},
						"GN": {
							"type": "string"
						},
						"GM": {
							"type": "string"
						},
						"GL": {
							"type": "string"
						},
						"GI": {
							"type": "string"
						},
						"GH": {
							"type": "string"
						},
						"OM": {
							"type": "string"
						},
						"TN": {
							"type": "string"
						},
						"JO": {
							"type": "string"
						},
						"HR": {
							"type": "string"
						},
						"HT": {
							"type": "string"
						},
						"HU": {
							"type": "string"
						},
						"HK": {
							"type": "string"
						},
						"HN": {
							"type": "string"
						},
						"HM": {
							"type": "string"
						},
						"VE": {
							"type": "string"
						},
						"PR": {
							"type": "string"
						},
						"PS": {
							"type": "string"
						},
						"PW": {
							"type": "string"
						},
						"PT": {
							"type": "string"
						},
						"SJ": {
							"type": "string"
						},
						"PY": {
							"type": "string"
						},
						"IQ": {
							"type": "string"
						},
						"PA": {
							"type": "string"
						},
						"PF": {
							"type": "string"
						},
						"PG": {
							"type": "string"
						},
						"PE": {
							"type": "string"
						},
						"PK": {
							"type": "string"
						},
						"PH": {
							"type": "string"
						},
						"PN": {
							"type": "string"
						},
						"PL": {
							"type": "string"
						},
						"PM": {
							"type": "string"
						},
						"ZM": {
							"type": "string"
						},
						"EH": {
							"type": "string"
						},
						"EE": {
							"type": "string"
						},
						"EG": {
							"type": "string"
						},
						"ZA": {
							"type": "string"
						},
						"EC": {
							"type": "string"
						},
						"IT": {
							"type": "string"
						},
						"VN": {
							"type": "string"
						},
						"SB": {
							"type": "string"
						},
						"ET": {
							"type": "string"
						},
						"SO": {
							"type": "string"
						},
						"ZW": {
							"type": "string"
						},
						"SA": {
							"type": "string"
						},
						"ES": {
							"type": "string"
						},
						"ER": {
							"type": "string"
						},
						"ME": {
							"type": "string"
						},
						"MD": {
							"type": "string"
						},
						"MG": {
							"type": "string"
						},
						"MF": {
							"type": "string"
						},
						"MA": {
							"type": "string"
						},
						"MC": {
							"type": "string"
						},
						"UZ": {
							"type": "string"
						},
						"MM": {
							"type": "string"
						},
						"ML": {
							"type": "string"
						},
						"MO": {
							"type": "string"
						},
						"MN": {
							"type": "string"
						},
						"MH": {
							"type": "string"
						},
						"MK": {
							"type": "string"
						},
						"MU": {
							"type": "string"
						},
						"MT": {
							"type": "string"
						},
						"MW": {
							"type": "string"
						},
						"MV": {
							"type": "string"
						},
						"MQ": {
							"type": "string"
						},
						"MP": {
							"type": "string"
						},
						"MS": {
							"type": "string"
						},
						"MR": {
							"type": "string"
						},
						"IM": {
							"type": "string"
						},
						"UG": {
							"type": "string"
						},
						"TZ": {
							"type": "string"
						},
						"MY": {
							"type": "string"
						},
						"MX": {
							"type": "string"
						},
						"IL": {
							"type": "string"
						},
						"FR": {
							"type": "string"
						},
						"IO": {
							"type": "string"
						},
						"SH": {
							"type": "string"
						},
						"FI": {
							"type": "string"
						},
						"FJ": {
							"type": "string"
						},
						"FK": {
							"type": "string"
						},
						"FM": {
							"type": "string"
						},
						"FO": {
							"type": "string"
						},
						"NI": {
							"type": "string"
						},
						"NL": {
							"type": "string"
						},
						"NO": {
							"type": "string"
						},
						"NA": {
							"type": "string"
						},
						"VU": {
							"type": "string"
						},
						"NC": {
							"type": "string"
						},
						"NE": {
							"type": "string"
						},
						"NF": {
							"type": "string"
						},
						"NG": {
							"type": "string"
						},
						"NZ": {
							"type": "string"
						},
						"NP": {
							"type": "string"
						},
						"NR": {
							"type": "string"
						},
						"NU": {
							"type": "string"
						},
						"CK": {
							"type": "string"
						},
						"XK": {
							"type": "string"
						},
						"CI": {
							"type": "string"
						},
						"CH": {
							"type": "string"
						},
						"CO": {
							"type": "string"
						},
						"CN": {
							"type": "string"
						},
						"CM": {
							"type": "string"
						},
						"CL": {
							"type": "string"
						},
						"CC": {
							"type": "string"
						},
						"CA": {
							"type": "string"
						},
						"CG": {
							"type": "string"
						},
						"CF": {
							"type": "string"
						},
						"CD": {
							"type": "string"
						},
						"CZ": {
							"type": "string"
						},
						"CY": {
							"type": "string"
						},
						"CX": {
							"type": "string"
						},
						"CR": {
							"type": "string"
						},
						"CW": {
							"type": "string"
						},
						"CV": {
							"type": "string"
						},
						"CU": {
							"type": "string"
						},
						"SZ": {
							"type": "string"
						},
						"SY": {
							"type": "string"
						},
						"SX": {
							"type": "string"
						},
						"KG": {
							"type": "string"
						},
						"KE": {
							"type": "string"
						},
						"SS": {
							"type": "string"
						},
						"SR": {
							"type": "string"
						},
						"KI": {
							"type": "string"
						},
						"KH": {
							"type": "string"
						},
						"KN": {
							"type": "string"
						},
						"KM": {
							"type": "string"
						},
						"ST": {
							"type": "string"
						},
						"SK": {
							"type": "string"
						},
						"KR": {
							"type": "string"
						},
						"SI": {
							"type": "string"
						},
						"KP": {
							"type": "string"
						},
						"KW": {
							"type": "string"
						},
						"SN": {
							"type": "string"
						},
						"SM": {
							"type": "string"
						},
						"SL": {
							"type": "string"
						},
						"SC": {
							"type": "string"
						},
						"KZ": {
							"type": "string"
						},
						"KY": {
							"type": "string"
						},
						"SG": {
							"type": "string"
						},
						"SE": {
							"type": "string"
						},
						"SD": {
							"type": "string"
						},
						"DO": {
							"type": "string"
						},
						"DM": {
							"type": "string"
						},
						"DJ": {
							"type": "string"
						},
						"DK": {
							"type": "string"
						},
						"VG": {
							"type": "string"
						},
						"DE": {
							"type": "string"
						},
						"YE": {
							"type": "string"
						},
						"DZ": {
							"type": "string"
						},
						"US": {
							"type": "string"
						},
						"UY": {
							"type": "string"
						},
						"YT": {
							"type": "string"
						},
						"UM": {
							"type": "string"
						},
						"LB": {
							"type": "string"
						},
						"LC": {
							"type": "string"
						},
						"LA": {
							"type": "string"
						},
						"TV": {
							"type": "string"
						},
						"TW": {
							"type": "string"
						},
						"TT": {
							"type": "string"
						},
						"TR": {
							"type": "string"
						},
						"LK": {
							"type": "string"
						},
						"LI": {
							"type": "string"
						},
						"LV": {
							"type": "string"
						},
						"TO": {
							"type": "string"
						},
						"LT": {
							"type": "string"
						},
						"LU": {
							"type": "string"
						},
						"LR": {
							"type": "string"
						},
						"LS": {
							"type": "string"
						},
						"TH": {
							"type": "string"
						},
						"TF": {
							"type": "string"
						},
						"TG": {
							"type": "string"
						},
						"TD": {
							"type": "string"
						},
						"TC": {
							"type": "string"
						},
						"LY": {
							"type": "string"
						},
						"VA": {
							"type": "string"
						},
						"VC": {
							"type": "string"
						},
						"AE": {
							"type": "string"
						},
						"AD": {
							"type": "string"
						},
						"AG": {
							"type": "string"
						},
						"AF": {
							"type": "string"
						},
						"AI": {
							"type": "string"
						},
						"VI": {
							"type": "string"
						},
						"IS": {
							"type": "string"
						},
						"IR": {
							"type": "string"
						},
						"AM": {
							"type": "string"
						},
						"AL": {
							"type": "string"
						},
						"AO": {
							"type": "string"
						},
						"AQ": {
							"type": "string"
						},
						"AS": {
							"type": "string"
						},
						"AR": {
							"type": "string"
						},
						"AU": {
							"type": "string"
						},
						"AT": {
							"type": "string"
						},
						"AW": {
							"type": "string"
						},
						"IN": {
							"type": "string"
						},
						"AX": {
							"type": "string"
						},
						"AZ": {
							"type": "string"
						},
						"IE": {
							"type": "string"
						},
						"ID": {
							"type": "string"
						},
						"UA": {
							"type": "string"
						},
						"QA": {
							"type": "string"
						},
						"MZ": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "jsonoutput"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Jsoninput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "jsoninput"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"BD": {
							"type": "string"
						},
						"BE": {
							"type": "string"
						},
						"BF": {
							"type": "string"
						},
						"BG": {
							"type": "string"
						},
						"BA": {
							"type": "string"
						},
						"BB": {
							"type": "string"
						},
						"WF": {
							"type": "string"
						},
						"BL": {
							"type": "string"
						},
						"BM": {
							"type": "string"
						},
						"BN": {
							"type": "string"
						},
						"BO": {
							"type": "string"
						},
						"BH": {
							"type": "string"
						},
						"BI": {
							"type": "string"
						},
						"BJ": {
							"type": "string"
						},
						"BT": {
							"type": "string"
						},
						"JM": {
							"type": "string"
						},
						"BV": {
							"type": "string"
						},
						"BW": {
							"type": "string"
						},
						"WS": {
							"type": "string"
						},
						"BQ": {
							"type": "string"
						},
						"BR": {
							"type": "string"
						},
						"BS": {
							"type": "string"
						},
						"JE": {
							"type": "string"
						},
						"BY": {
							"type": "string"
						},
						"BZ": {
							"type": "string"
						},
						"RU": {
							"type": "string"
						},
						"RW": {
							"type": "string"
						},
						"RS": {
							"type": "string"
						},
						"TL": {
							"type": "string"
						},
						"RE": {
							"type": "string"
						},
						"TM": {
							"type": "string"
						},
						"TJ": {
							"type": "string"
						},
						"RO": {
							"type": "string"
						},
						"TK": {
							"type": "string"
						},
						"GW": {
							"type": "string"
						},
						"GU": {
							"type": "string"
						},
						"GT": {
							"type": "string"
						},
						"GS": {
							"type": "string"
						},
						"GR": {
							"type": "string"
						},
						"GQ": {
							"type": "string"
						},
						"GP": {
							"type": "string"
						},
						"JP": {
							"type": "string"
						},
						"GY": {
							"type": "string"
						},
						"GG": {
							"type": "string"
						},
						"GF": {
							"type": "string"
						},
						"GE": {
							"type": "string"
						},
						"GD": {
							"type": "string"
						},
						"GB": {
							"type": "string"
						},
						"GA": {
							"type": "string"
						},
						"SV": {
							"type": "string"
						},
						"GN": {
							"type": "string"
						},
						"GM": {
							"type": "string"
						},
						"GL": {
							"type": "string"
						},
						"GI": {
							"type": "string"
						},
						"GH": {
							"type": "string"
						},
						"OM": {
							"type": "string"
						},
						"TN": {
							"type": "string"
						},
						"JO": {
							"type": "string"
						},
						"HR": {
							"type": "string"
						},
						"HT": {
							"type": "string"
						},
						"HU": {
							"type": "string"
						},
						"HK": {
							"type": "string"
						},
						"HN": {
							"type": "string"
						},
						"HM": {
							"type": "string"
						},
						"VE": {
							"type": "string"
						},
						"PR": {
							"type": "string"
						},
						"PS": {
							"type": "string"
						},
						"PW": {
							"type": "string"
						},
						"PT": {
							"type": "string"
						},
						"SJ": {
							"type": "string"
						},
						"PY": {
							"type": "string"
						},
						"IQ": {
							"type": "string"
						},
						"PA": {
							"type": "string"
						},
						"PF": {
							"type": "string"
						},
						"PG": {
							"type": "string"
						},
						"PE": {
							"type": "string"
						},
						"PK": {
							"type": "string"
						},
						"PH": {
							"type": "string"
						},
						"PN": {
							"type": "string"
						},
						"PL": {
							"type": "string"
						},
						"PM": {
							"type": "string"
						},
						"ZM": {
							"type": "string"
						},
						"EH": {
							"type": "string"
						},
						"EE": {
							"type": "string"
						},
						"EG": {
							"type": "string"
						},
						"ZA": {
							"type": "string"
						},
						"EC": {
							"type": "string"
						},
						"IT": {
							"type": "string"
						},
						"VN": {
							"type": "string"
						},
						"SB": {
							"type": "string"
						},
						"ET": {
							"type": "string"
						},
						"SO": {
							"type": "string"
						},
						"ZW": {
							"type": "string"
						},
						"SA": {
							"type": "string"
						},
						"ES": {
							"type": "string"
						},
						"ER": {
							"type": "string"
						},
						"ME": {
							"type": "string"
						},
						"MD": {
							"type": "string"
						},
						"MG": {
							"type": "string"
						},
						"MF": {
							"type": "string"
						},
						"MA": {
							"type": "string"
						},
						"MC": {
							"type": "string"
						},
						"UZ": {
							"type": "string"
						},
						"MM": {
							"type": "string"
						},
						"ML": {
							"type": "string"
						},
						"MO": {
							"type": "string"
						},
						"MN": {
							"type": "string"
						},
						"MH": {
							"type": "string"
						},
						"MK": {
							"type": "string"
						},
						"MU": {
							"type": "string"
						},
						"MT": {
							"type": "string"
						},
						"MW": {
							"type": "string"
						},
						"MV": {
							"type": "string"
						},
						"MQ": {
							"type": "string"
						},
						"MP": {
							"type": "string"
						},
						"MS": {
							"type": "string"
						},
						"MR": {
							"type": "string"
						},
						"IM": {
							"type": "string"
						},
						"UG": {
							"type": "string"
						},
						"TZ": {
							"type": "string"
						},
						"MY": {
							"type": "string"
						},
						"MX": {
							"type": "string"
						},
						"IL": {
							"type": "string"
						},
						"FR": {
							"type": "string"
						},
						"IO": {
							"type": "string"
						},
						"SH": {
							"type": "string"
						},
						"FI": {
							"type": "string"
						},
						"FJ": {
							"type": "string"
						},
						"FK": {
							"type": "string"
						},
						"FM": {
							"type": "string"
						},
						"FO": {
							"type": "string"
						},
						"NI": {
							"type": "string"
						},
						"NL": {
							"type": "string"
						},
						"NO": {
							"type": "string"
						},
						"NA": {
							"type": "string"
						},
						"VU": {
							"type": "string"
						},
						"NC": {
							"type": "string"
						},
						"NE": {
							"type": "string"
						},
						"NF": {
							"type": "string"
						},
						"NG": {
							"type": "string"
						},
						"NZ": {
							"type": "string"
						},
						"NP": {
							"type": "string"
						},
						"NR": {
							"type": "string"
						},
						"NU": {
							"type": "string"
						},
						"CK": {
							"type": "string"
						},
						"XK": {
							"type": "string"
						},
						"CI": {
							"type": "string"
						},
						"CH": {
							"type": "string"
						},
						"CO": {
							"type": "string"
						},
						"CN": {
							"type": "string"
						},
						"CM": {
							"type": "string"
						},
						"CL": {
							"type": "string"
						},
						"CC": {
							"type": "string"
						},
						"CA": {
							"type": "string"
						},
						"CG": {
							"type": "string"
						},
						"CF": {
							"type": "string"
						},
						"CD": {
							"type": "string"
						},
						"CZ": {
							"type": "string"
						},
						"CY": {
							"type": "string"
						},
						"CX": {
							"type": "string"
						},
						"CR": {
							"type": "string"
						},
						"CW": {
							"type": "string"
						},
						"CV": {
							"type": "string"
						},
						"CU": {
							"type": "string"
						},
						"SZ": {
							"type": "string"
						},
						"SY": {
							"type": "string"
						},
						"SX": {
							"type": "string"
						},
						"KG": {
							"type": "string"
						},
						"KE": {
							"type": "string"
						},
						"SS": {
							"type": "string"
						},
						"SR": {
							"type": "string"
						},
						"KI": {
							"type": "string"
						},
						"KH": {
							"type": "string"
						},
						"KN": {
							"type": "string"
						},
						"KM": {
							"type": "string"
						},
						"ST": {
							"type": "string"
						},
						"SK": {
							"type": "string"
						},
						"KR": {
							"type": "string"
						},
						"SI": {
							"type": "string"
						},
						"KP": {
							"type": "string"
						},
						"KW": {
							"type": "string"
						},
						"SN": {
							"type": "string"
						},
						"SM": {
							"type": "string"
						},
						"SL": {
							"type": "string"
						},
						"SC": {
							"type": "string"
						},
						"KZ": {
							"type": "string"
						},
						"KY": {
							"type": "string"
						},
						"SG": {
							"type": "string"
						},
						"SE": {
							"type": "string"
						},
						"SD": {
							"type": "string"
						},
						"DO": {
							"type": "string"
						},
						"DM": {
							"type": "string"
						},
						"DJ": {
							"type": "string"
						},
						"DK": {
							"type": "string"
						},
						"VG": {
							"type": "string"
						},
						"DE": {
							"type": "string"
						},
						"YE": {
							"type": "string"
						},
						"DZ": {
							"type": "string"
						},
						"US": {
							"type": "string"
						},
						"UY": {
							"type": "string"
						},
						"YT": {
							"type": "string"
						},
						"UM": {
							"type": "string"
						},
						"LB": {
							"type": "string"
						},
						"LC": {
							"type": "string"
						},
						"LA": {
							"type": "string"
						},
						"TV": {
							"type": "string"
						},
						"TW": {
							"type": "string"
						},
						"TT": {
							"type": "string"
						},
						"TR": {
							"type": "string"
						},
						"LK": {
							"type": "string"
						},
						"LI": {
							"type": "string"
						},
						"LV": {
							"type": "string"
						},
						"TO": {
							"type": "string"
						},
						"LT": {
							"type": "string"
						},
						"LU": {
							"type": "string"
						},
						"LR": {
							"type": "string"
						},
						"LS": {
							"type": "string"
						},
						"TH": {
							"type": "string"
						},
						"TF": {
							"type": "string"
						},
						"TG": {
							"type": "string"
						},
						"TD": {
							"type": "string"
						},
						"TC": {
							"type": "string"
						},
						"LY": {
							"type": "string"
						},
						"VA": {
							"type": "string"
						},
						"VC": {
							"type": "string"
						},
						"AE": {
							"type": "string"
						},
						"AD": {
							"type": "string"
						},
						"AG": {
							"type": "string"
						},
						"AF": {
							"type": "string"
						},
						"AI": {
							"type": "string"
						},
						"VI": {
							"type": "string"
						},
						"IS": {
							"type": "string"
						},
						"IR": {
							"type": "string"
						},
						"AM": {
							"type": "string"
						},
						"AL": {
							"type": "string"
						},
						"AO": {
							"type": "string"
						},
						"AQ": {
							"type": "string"
						},
						"AS": {
							"type": "string"
						},
						"AR": {
							"type": "string"
						},
						"AU": {
							"type": "string"
						},
						"AT": {
							"type": "string"
						},
						"AW": {
							"type": "string"
						},
						"IN": {
							"type": "string"
						},
						"AX": {
							"type": "string"
						},
						"AZ": {
							"type": "string"
						},
						"IE": {
							"type": "string"
						},
						"ID": {
							"type": "string"
						},
						"UA": {
							"type": "string"
						},
						"QA": {
							"type": "string"
						},
						"MZ": {
							"type": "string"
						},
						"sepalLength": {
							"type": "number"
						},
						"sepalWidth": {
							"type": "number"
						},
						"petalLength": {
							"type": "number"
						},
						"petalWidth": {
							"type": "number"
						},
						"species": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductName",
						"type": "nvarchar"
					},
					{
						"name": "OrderDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "productid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "productname",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "brand",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_csv_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ws": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('2023/',substring(dataset().ws,1,4),'/')",
							"type": "Expression"
						},
						"fileSystem": "2023output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_csv_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ws": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('2023/',substring(dataset().ws,1,4),'/')",
							"type": "Expression"
						},
						"fileSystem": "2023"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_sink02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dswindowstarttime": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@substring(dataset().dswindowstarttime,0,4)",
							"type": "Expression"
						},
						"fileSystem": "2023output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adls_source02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dswindowstarttime": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*",
						"folderPath": {
							"value": "@substring(dataset().dswindowstarttime,0,4)\n",
							"type": "Expression"
						},
						"fileSystem": "2023"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blobFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies_metadata.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "adult",
						"type": "String"
					},
					{
						"name": "belongs_to_collection",
						"type": "String"
					},
					{
						"name": "budget",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "homepage",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "imdb_id",
						"type": "String"
					},
					{
						"name": "original_language",
						"type": "String"
					},
					{
						"name": "original_title",
						"type": "String"
					},
					{
						"name": "overview",
						"type": "String"
					},
					{
						"name": "popularity",
						"type": "String"
					},
					{
						"name": "poster_path",
						"type": "String"
					},
					{
						"name": "production_companies",
						"type": "String"
					},
					{
						"name": "production_countries",
						"type": "String"
					},
					{
						"name": "release_date",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					},
					{
						"name": "runtime",
						"type": "String"
					},
					{
						"name": "spoken_languages",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "tagline",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "video",
						"type": "String"
					},
					{
						"name": "vote_average",
						"type": "String"
					},
					{
						"name": "vote_count",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/citiesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cityid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cityname",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cities"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee_data.csv",
						"container": "storagecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "ZipCode",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "MobileNumber",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deleteFileBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "countries22.csv",
						"container": "input"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/departmenTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deptid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "deptname",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "department"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsMovieRatings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MovieRatings.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "sno",
						"type": "String"
					},
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "releasedate",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outdataflow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emptable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragekV",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragekV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventoutcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragekV",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "eventoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragekV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/out10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "out10"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/output2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlToBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ref_no",
						"type": "nvarchar"
					},
					{
						"name": "period",
						"type": "decimal",
						"precision": 8,
						"scale": 4
					},
					{
						"name": "datavalue",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_status",
						"type": "char"
					},
					{
						"name": "emp_subject",
						"type": "nvarchar"
					},
					{
						"name": "emp_group",
						"type": "nvarchar"
					},
					{
						"name": "emp_series1",
						"type": "nvarchar"
					},
					{
						"name": "emp_series2",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSqlDbKV02')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultLS",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzSqlDbKV02_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragekV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultLS",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStoragekV_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultLS",
							"type": "LinkedServiceReference"
						},
						"secretName": "adlskey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultLS_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseKV_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultLS",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqlpassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('blob_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sql_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtrigger01')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipelineEventTrigger",
							"type": "PipelineReference"
						},
						"parameters": {
							"ppcontainer": "[parameters('eventtrigger01_properties_pipelineEventTrigger_parameters_ppcontainer')]",
							"ppfile": "[parameters('eventtrigger01_properties_pipelineEventTrigger_parameters_ppfile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/eventinput/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('eventtrigger01_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipelineEventTrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumblingwindow01')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2023-09-30T01:00:00Z",
					"endTime": "2023-10-05T01:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 2,
					"retryPolicy": {
						"count": 2,
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumblingwindowtrigger002')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2023-10-01T01:00:00Z",
					"endTime": "2023-10-06T01:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/workingTumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "TumblingWindowDemoWorking",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowstarttime": "[parameters('workingTumbling_properties_pipeline_parameters_windowstarttime')]",
						"windowendtime": "[parameters('workingTumbling_properties_pipeline_parameters_windowendtime')]",
						"triggerstarttime": "[parameters('workingTumbling_properties_pipeline_parameters_triggerstarttime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Month",
					"interval": 10,
					"startTime": "2023-10-01T01:00:00Z",
					"endTime": "2023-10-06T01:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TumblingWindowDemoWorking')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowAggregateDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsMovieRatings",
								"type": "DatasetReference"
							},
							"name": "movieRatings",
							"description": "Import data frommovieratings.csv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsratings",
								"type": "DatasetReference"
							},
							"name": "sinkMovieRatings"
						}
					],
					"transformations": [
						{
							"name": "yearFilter"
						},
						{
							"name": "aggregateOnRating"
						},
						{
							"name": "yearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          sno as string,",
						"          movie as string,",
						"          releasedate as string,",
						"          rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> movieRatings",
						"movieRatings filter(toInteger(year(toDate(releasedate, 'yyyy-MM-dd', 'en-US'))) >= 2015 && toInteger(year(toDate(releasedate, 'yyyy-MM-dd', 'en-US'))) <= 2020) ~> yearFilter",
						"yearColumn aggregate(groupBy(yearOfRelease,",
						"          rating),",
						"     ratingCount = count(rating)) ~> aggregateOnRating",
						"yearFilter derive(yearOfRelease = year(toDate(releasedate,'yyyy-mm-dd','en-us'))) ~> yearColumn",
						"aggregateOnRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesratings'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkMovieRatings"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsMovieRatings')]",
				"[concat(variables('factoryId'), '/datasets/dsratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowColumnPatterns01')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductsTable",
								"type": "DatasetReference"
							},
							"name": "sourceProducts"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductsTable",
								"type": "DatasetReference"
							},
							"name": "sinkProducts"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnPrice"
						},
						{
							"name": "alterRowPrice"
						}
					],
					"scriptLines": [
						"source(output(",
						"          productid as integer,",
						"          productname as string,",
						"          price as decimal(10,4),",
						"          brand as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProducts",
						"sourceProducts derive(each(match(type=='decimal'), $$ = round($$,0))) ~> derivedColumnPrice",
						"derivedColumnPrice alterRow(updateIf(true())) ~> alterRowPrice",
						"alterRowPrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          productid as integer,",
						"          productname as string,",
						"          price as decimal(10,4),",
						"          brand as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['productid','productname'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkProducts"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProductsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowColumnPatternsDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdersTable",
								"type": "DatasetReference"
							},
							"name": "sourceOrders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OrdersTable",
								"type": "DatasetReference"
							},
							"name": "sinkOrderTable"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnOrderDate"
						},
						{
							"name": "alterRowOrderDate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          ProductName as string,",
						"          OrderDate as timestamp,",
						"          Quantity as integer,",
						"          ProductPrice as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceOrders",
						"sourceOrders derive(OrderDate = toDate(OrderDate)) ~> derivedColumnOrderDate",
						"derivedColumnOrderDate alterRow(updateIf(true())) ~> alterRowOrderDate",
						"alterRowOrderDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OrderID as integer,",
						"          ProductName as string,",
						"          OrderDate as timestamp,",
						"          Quantity as integer,",
						"          ProductPrice as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OrderID','ProductName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkOrderTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdersTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowConditionalSplitDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emptable",
								"type": "DatasetReference"
							},
							"name": "sourceEmp"
						},
						{
							"dataset": {
								"referenceName": "emptable",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sinkTesting"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSales"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sinkHR"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sinkTestingemp"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sinksalesemp"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sinkOtheremp"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          salary as decimal(10,2),",
						"          hire_date as date,",
						"          dept as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceEmp",
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          salary as decimal(10,2),",
						"          hire_date as date,",
						"          dept as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceEmployee",
						"sourceEmployee split(dept==1,",
						"     dept==2,",
						"     dept==3,",
						"     disjoint: false) ~> ConditionalSplit@(HR, Testing, Sales, Other)",
						"sourceEmp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'output1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['TestingEmployees'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkTesting",
						"sourceEmp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'output1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SalesEmployees'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSales",
						"ConditionalSplit@HR sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'output1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['HRemployees'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkHR",
						"ConditionalSplit@Testing sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'output1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['TestingEmployees'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkTestingemp",
						"ConditionalSplit@Sales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'output1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SalesEmployees'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinksalesemp",
						"ConditionalSplit@Other sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'output1',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['OtherEmployees'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOtheremp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/emptable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowDerivedColumnDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customerTable",
								"type": "DatasetReference"
							},
							"name": "sourceCustomerTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DemoCustomerTable",
								"type": "DatasetReference"
							},
							"name": "sinkDemoCustomerTable"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnFullName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          City as string,",
						"          ZipCode as string,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Country as string,",
						"          MobileNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceCustomerTable",
						"sourceCustomerTable derive(fullName = iif(isNull(FirstName) || isNull(LastName),coalesce(FirstName, LastName),concat(FirstName, ' ', LastName))) ~> derivedColumnFullName",
						"derivedColumnFullName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          City as string,",
						"          ZipCode as string,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Country as string,",
						"          MobileNumber as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkDemoCustomerTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customerTable')]",
				"[concat(variables('factoryId'), '/datasets/DemoCustomerTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowExists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DemoCustomerTable",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "citiesTable",
								"type": "DatasetReference"
							},
							"name": "sourcecities"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "existsCity"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          City as string,",
						"          ZipCode as string,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Country as string,",
						"          MobileNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceCustomer",
						"source(output(",
						"          cityid as integer,",
						"          cityname as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcecities",
						"sourceCustomer, sourcecities exists(City == cityname,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsCity",
						"existsCity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CustomersCities'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DemoCustomerTable')]",
				"[concat(variables('factoryId'), '/datasets/citiesTable')]",
				"[concat(variables('factoryId'), '/datasets/output2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowFlowLetDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowletRemoveDuplicates",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "derivedColumnDummy"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as short,",
						"          Name as string,",
						"          Role as string,",
						"          Salary as float,",
						"          City as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'input',",
						"     fileName: 'Employees.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"derivedColumnDummy compose(mapColumn(",
						"          employeeID = EmployeeID,",
						"          empName = Name,",
						"          empRole = Role,",
						"          empSalary = Salary,",
						"          empCity = City,",
						"          country = dummyCountry,",
						"          population = dummyPopluation",
						"     ),",
						"     composition: 'flowletRemoveDuplicates') ~> flowlet1@(output1)",
						"sourceEmployee derive(dummyCountry = 'country',",
						"          dummyPopluation = 'population') ~> derivedColumnDummy",
						"flowlet1@output1 select(mapColumn(",
						"          employeeID,",
						"          empName,",
						"          empRole,",
						"          empSalary,",
						"          empCity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          adult as string,",
						"          belongs_to_collection as string,",
						"          budget as string,",
						"          genres as string,",
						"          homepage as string,",
						"          id as string,",
						"          imdb_id as string,",
						"          original_language as string,",
						"          original_title as string,",
						"          overview as string,",
						"          popularity as string,",
						"          poster_path as string,",
						"          production_companies as string,",
						"          production_countries as string,",
						"          release_date as string,",
						"          revenue as string,",
						"          runtime as string,",
						"          spoken_languages as string,",
						"          status as string,",
						"          tagline as string,",
						"          title as string,",
						"          video as string,",
						"          vote_average as string,",
						"          vote_count as string,",
						"          {_c24} as string",
						"     ),",
						"     format: 'delimited',",
						"     container: 'output2',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['UniqueEmployee'],",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flowletRemoveDuplicates')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowJoinDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emptable",
								"type": "DatasetReference"
							},
							"name": "sourceEmp"
						},
						{
							"dataset": {
								"referenceName": "departmenTable",
								"type": "DatasetReference"
							},
							"name": "sourceDepartment"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "out10",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          salary as decimal(10,2),",
						"          hire_date as date,",
						"          dept as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceEmp",
						"source(output(",
						"          deptid as integer,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDepartment",
						"sourceEmp, sourceDepartment join(dept == deptid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          salary,",
						"          hire_date,",
						"          deptname",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/emptable')]",
				"[concat(variables('factoryId'), '/datasets/departmenTable')]",
				"[concat(variables('factoryId'), '/datasets/out10')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowletRemoveDuplicates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          employeeID as integer,",
						"          empName as string,",
						"          empRole as string,",
						"          empSalary as float,",
						"          empCity as string,",
						"          country as string,",
						"          population as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(employeeID,",
						"          empName,",
						"          empRole,",
						"          empSalary,",
						"          empCity,",
						"          country,",
						"          population),",
						"     count = count()) ~> aggregate1",
						"aggregate1 output(mapColumn(",
						"          employeeID,",
						"          empName,",
						"          empRole,",
						"          empSalary,",
						"          empCity,",
						"          country,",
						"          population",
						"     )) ~> output1"
					]
				}
			},
			"dependsOn": []
		}
	]
}